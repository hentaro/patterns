<?php
namespace App\StarWars\Adapter;

use ReflectionClass;
use ReflectionMethod;
use App\StarWars\IoC\IoCException;

class AdapterGenerator
{
    /**
     * @param string $interfaceName
     * @param object $target
     * @return object
     * @throws IoCException
     */
    public static function create(string $interfaceName, object $target): object
    {
        if (!interface_exists($interfaceName)) {
            throw new IoCException("Interface not found: {$interfaceName}");
        }

        $ref = new ReflectionClass($interfaceName);
        $short = $ref->getShortName();
        $generatedClass = "AutoGenerated_{$short}_Adapter";

        if (!class_exists($generatedClass)) {
            $code = self::generateAdapterClassCode($ref, $generatedClass);
            eval($code);
        }

        return new $generatedClass($target);
    }

    private static function generateAdapterClassCode(ReflectionClass $interface, string $className): string
    {
        $interfaceFQN = $interface->getName();
        $methodsCode = [];

        foreach ($interface->getMethods() as $method) {
            $methodsCode[] = self::generateMethodCode($method, $interfaceFQN);
        }

        $methods = implode("\n\n", $methodsCode);

        return <<<PHP
        class {$className} implements \\{$interfaceFQN}
        {
            private \$obj;

            public function __construct(\$obj)
            {
                \$this->obj = \$obj;
            }

            {$methods}
        }
        PHP;
    }

    private static function generateMethodCode(ReflectionMethod $method, string $prefix): string
    {
        $name = $method->getName();
        $params = $method->getParameters();

        // параметры для сигнатуры метода: "$name" (без типов)
        $paramSigs = [];
        // аргументы для передачи фабрике/IoC: "$name, $other"
        $argVars = [];

        foreach ($params as $p) {
            $paramSigs[] = '$' . $p->getName();
            $argVars[] = '$' . $p->getName();
        }

        $argsSignature = implode(', ', $paramSigs);
        $argsForResolve = '$this->obj' . (count($argVars) ? ', ' . implode(', ', $argVars) : '');

        // GET-паттерн: getX -> resolve "Interface: x.get"
        if (str_starts_with($name, 'get')) {
            $property = strtolower(substr($name, 3));
            return <<<PHP
            public function {$name}()
            {
                return \\App\\StarWars\\IoC::Resolve(
                    "{$prefix}:{$property}.get",
                    \$this->obj
                );
            }
            PHP;
        }

        // SET-паттерн: setX($value) -> resolve "Interface: x.set"
        if (str_starts_with($name, 'set')) {
            $firstParam = $params[0] ?? null;
            $firstVar = $firstParam ? ('$' . $firstParam->getName()) : '$value';
            $property = strtolower(substr($name, 3));
            return <<<PHP
            public function {$name}({$argsSignature})
            {
                return \\App\\StarWars\\IoC::Resolve(
                    "{$prefix}:{$property}.set",
                    \$this->obj, {$firstVar}
                )->execute();
            }
            PHP;
        }

        // остальное команды
        return <<<PHP
        public function {$name}({$argsSignature})
        {
            return \\App\\StarWars\\IoC::Resolve(
                "{$prefix}:{$name}",
                {$argsForResolve}
            )->execute();
        }
        PHP;
    }
}
